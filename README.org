#+title: Nim + musl
#+author: Kaushal Modi

[[https://travis-ci.org/kaushalmodi/hello_musl][https://travis-ci.org/kaushalmodi/hello_musl.svg?branch=master]]

This repo contains a generic [[https://github.com/kaushalmodi/hello_musl/blob/master/config.nims][~config.nims~]] that adds a Nim
"sub-command" or task named *musl*. You can simply add that file to
your Nim project, and run ~nim musl foo.nim~ (assuming that the below
prerequisites are met).

* Prerequisites
- OS: One of Linux x86 (32/64), ARM (32/64), MIPS (32/64), PowerPC
  (32/64), S390X, SuperH, Microblaze, OpenRISC ([[https://www.musl-libc.org/intro.html][ref]])
- Nim: [[https://nim-lang.org/]] (built from [[https://github.com/nim-lang/Nim/tree/devel][*devel*]] branch as of <2018-09-13 Thu>)
- *musl* library: [[https://www.musl-libc.org/download.html]]
** Optional
These optional command-line utilities for binary size optimization
will be run automatically one by one, if present.
- ~strip~ (from ~binutils~): [[https://sourceware.org/binutils/docs/binutils/strip.html]]
- ~upx~: [[https://github.com/upx/upx]]
* Generating static binary
** For this example ~hello_musl~ project
1. ~git clone https://github.com/kaushalmodi/hello_musl~
2. ~cd hello_musl~
3. ~nim musl src/hello_musl.nim~

That will generate ~hello_musl~ binary in ~src/~ directory.

- ~ldd ./src/hello_musl~ will print "not a dynamic executable".
- ~./src/hello_musl~ will print "Hello, World!"
*** Sample Travis CI log
[[https://travis-ci.org/kaushalmodi/hello_musl/builds][All Travis CI logs]]
#+begin_example
$ nim musl src/hello_musl.nim
Hint:used config file '/home/travis/.choosenim/toolchains/nim-#devel/config/nim.cfg' [Conf]
Hint:used config file '/home/travis/build/kaushalmodi/hello_musl/config.nims' [Conf]
Running 'nim c -d:musl -d:release src/hello_musl.nim' ..
Hint:used config file '/home/travis/.choosenim/toolchains/nim-#devel/config/nim.cfg' [Conf]
Hint:used config file '/home/travis/build/kaushalmodi/hello_musl/config.nims' [Conf]
  [-d:musl] Building a static binary using musl ..
Hint:system [Processing]
Hint:hello_musl [Processing]
CC: stdlib_system
CC: hello_musl_hello_musl
Hint: [Link]
Hint:operation successful (27180 lines compiled; 1.100 sec total; 38.77MiB peakmem; Release Build) [SuccessX]
Running 'strip -s' ..
Running 'upx --best' ..
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2018
UPX 3.95        Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018
        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     30120 ->     16200   53.78%   linux/amd64   hello_musl
Packed 1 file.
Created binary: src/hello_musl
The command "nim musl src/hello_musl.nim" exited with 0.

$ ls -latr ./src/
total 20
-rw-r--r-- 1 travis travis   176 Sep 13 20:43 hello_musl.nim
drwxr-xr-x 5 travis travis   221 Sep 13 20:48 ..
-rwxr-xr-x 1 travis travis 16200 Sep 13 20:48 hello_musl
drwxr-xr-x 2 travis travis    46 Sep 13 20:48 .
The command "ls -latr ./src/" exited with 0.

$ ldd ./src/hello_musl || true
	not a dynamic executable
The command "ldd ./src/hello_musl || true" exited with 0.

$ ./src/hello_musl
Hello, World!
The command "./src/hello_musl" exited with 0.
Done. Your build exited with 0.
#+end_example
** For your Nim project
- Copy the [[https://github.com/kaushalmodi/hello_musl/blob/master/config.nims][~config.nims~]] to your Nim project.
- While being the same directory as ~config.nims~, do:
  #+begin_example
  nim musl <path/to/your/nim/file>
  #+end_example
* References
- [[https://github.com/nim-lang/Nim/wiki/Using-nimscript-for-configuration]]
- [[https://nim-lang.org/docs/nims.html]]
  - [[https://nim-lang.org/docs/nimscript.html]]
- [[https://hookrace.net/blog/nim-binary-size/#using-the-c-standard-library]]
- [[https://www.reddit.com/r/programming/comments/2wk7q6/static_linking_with_nim/corwtl7/]]
* TODO Todo-List
- [ ] Figure out how to have ~nimble install~ install the binary
  generated by ~nim musl~.
- [X] Don't hard-code the ~muslGcc~ const in ~config.nims~
- [X] Not require ~hello_musl.nimble~
  - Currently that is needed just to add the ~-d:musl~ and
    ~-d:release~ switches, and then to auto-run ~strip -s~.
  - So to remove dependency on this file, I need to figure out how to
    get the current /foo.nim/ file name from within the ~config.nims~.
  - Eventual goal is to reuse the same ~config.nims~ for all
    projects. So I cannot hardcode the ~pkgName~ as I do in
    ~hello_musl.nimble~.
